{"version":3,"sources":["assets/images/user.jpg","components/Common/Paginator/Paginator.module.css","components/Users/Users.module.css","components/Common/Paginator/Paginator.tsx","components/Users/Users/User.tsx","components/Users/Users/UsersSearchForm.tsx","components/Users/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx"],"names":["module","exports","Paginator","pageSize","currentPage","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","s","paginator","onClick","filter","p","map","cn","selectedPage","pageNumber","key","e","User","user","followingInProgress","follow","unfollow","to","id","src","photos","small","userPhoto","alt","followed","disabled","some","name","status","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","initialValues","term","friend","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","as","value","Users","totalUsersCount","users","u","getUsers","createSelector","state","usersPage","getPageSize","getCurrentPage","getTotalUsersCount","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","UsersContainer","requestUsers","this","Preloader","Component","compose","connect"],"mappings":"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","file":"static/js/5.ccaac9da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.35aa54a1.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1Eobv\",\"pageNumber\":\"Paginator_pageNumber__mL8zj\",\"selectedPage\":\"Paginator_selectedPage__p0kWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1MlkK\"};","import React, {useState} from \"react\";\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = ({pageSize, currentPage = 1, totalItemsCount, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 && <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [s.selectedPage]: currentPage === p\r\n                    }, s.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber && <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from \"react\";\r\nimport s from '../Users.module.css'\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { UserType } from \"../../../redux/types\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<UserPropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n    debugger\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto} alt='userPhoto' className={s.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}\r\n                            >Unfollow</button>\r\n                            : <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}\r\n                            >Follow</button>}\r\n                </div>\r\n                </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                    </span>\r\n                <span>\r\n                    <div>{\"u.location.country\"}</div>\r\n                    <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../../redux/users-reduser\";\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FormType = {\r\n    term: string\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    return {}\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo((props) => {\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{term: '', friend: \"null\"}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../../redux/types\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType} from \"../../../redux/users-reduser\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nconst Users: React.FC<UsersPropsType> = ({pageSize, currentPage, totalUsersCount, onPageChanged, ...props}) => {\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={props.onFilterChanged}/>\r\n            <Paginator\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                totalItemsCount={totalUsersCount}\r\n                onPageChanged={onPageChanged}\r\n            />\r\n            <div>\r\n                {props.users.map(u =>\r\n                    <User\r\n                        key={u.id}\r\n                        user={u}\r\n                        followingInProgress={props.followingInProgress}\r\n                        follow={props.follow}\r\n                        unfollow={props.unfollow}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import {AppRootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\"\r\n\r\nconst getUsersSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })\r\nexport const getPageSize = (state: AppRootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getCurrentPage = (state: AppRootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getTotalUsersCount = (state: AppRootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getIsFetching = (state: AppRootStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppRootStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: AppRootStateType) => {\r\n    return state.usersPage.filter\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {follow, unfollow, requestUsers, FilterType} from '../../redux/users-reduser';\r\nimport Users from './Users/Users';\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport { AppRootStateType } from '../../redux/redux-store';\r\nimport {\r\n    getPageSize,\r\n    getUsers,\r\n    getCurrentPage,\r\n    getTotalUsersCount,\r\n    getIsFetching,\r\n    getFollowingInProgress,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {UserType} from \"../../redux/types\";\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    filter: FilterType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\r\n}\r\ntype UsersContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize, filter} = this.props\r\n        this.props.requestUsers(currentPage, pageSize, filter)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize, filter} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize, filter)\r\n    }\r\n\r\n    onFilterChanged = (filter: FilterType) => {\r\n        const {pageSize} = this.props\r\n        this.props.requestUsers(1, pageSize, filter)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                users={this.props.users}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                followingInProgress={this.props.followingInProgress}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                onPageChanged={this.onPageChanged}\r\n                onFilterChanged={this.onFilterChanged}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        filter: getUsersFilter(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, null, AppRootStateType>(mapStateToProps, {requestUsers, follow, unfollow}),\r\n)(UsersContainer)\r\n"],"sourceRoot":""}