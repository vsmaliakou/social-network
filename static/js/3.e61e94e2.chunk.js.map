{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/user.jpg","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","profileStatus","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateUserStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profilePage","error","onSubmit","formSummaryError","createField","Input","Textarea","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","infoPoint","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","onClick","Preloader","Contact","ProfileInfo","savePhoto","saveProfile","profileInfoBlock","src","photos","large","userPhoto","mainPhoto","photoSelection","type","target","files","profileDataBlock","profileName","fullName","initialValues","formData","then","Post","item","message","likeCount","MyPosts","memo","postsElements","posts","reverse","p","id","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","name","component","placeholder","validate","requiredField","Profile","MyPostsContainer","ProfileContainer","userId","match","params","JSON","stringify","authorizedUserId","history","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","compose","profile","data","withRouter"],"mappings":"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","file":"static/js/3.e61e94e2.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType): MapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToProps> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__23hv_\",\"mainPhoto\":\"ProfileInfo_mainPhoto__tjjbB\",\"profileDataBlock\":\"ProfileInfo_profileDataBlock__2T-_Y\",\"profileName\":\"ProfileInfo_profileName__3_VSz\",\"profileStatus\":\"ProfileInfo_profileStatus__17HH6\",\"infoPoint\":\"ProfileInfo_infoPoint__3dLBD\",\"contact\":\"ProfileInfo_contact__AvHXG\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3-ikd\"};","module.exports = __webpack_public_path__ + \"static/media/user.35aa54a1.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3lvOM\",\"posts\":\"MyPosts_posts__viENX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2VERT\"};","import React, {ChangeEvent, useState, useEffect} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div className={s.profileStatus}>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"no status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {UserProfileType} from \"../../../redux/store\";\r\n\r\ntype ProfileDataFormType = {\r\n    profilePage: UserProfileType                    //   FIX CONTACTS ---> Object.keys(profilePage ?  profilePage.contacts : \"\")\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<UserProfileType, ProfileDataFormType> & ProfileDataFormType> = ({handleSubmit, profilePage, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {\r\n                error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {createField(\"Full name\", \"fullName\", Input, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField(\"About me\", \"aboutMe\", Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", Input, [], \"checkbox\")}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profilePage ?  profilePage.contacts : \"\").map((key) => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, Input, [])}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n            <div><button>save</button></div>\r\n        </form>\r\n    )\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm<UserProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ContactsType, UserProfileType} from \"../../../redux/store\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    profilePage: UserProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<any>\r\n}\r\ntype ProfileDataType = {\r\n    profilePage: UserProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({\r\n                                                    profilePage,\r\n                                                    status,\r\n                                                    updateUserStatus,\r\n                                                    isOwner,\r\n                                                    savePhoto,\r\n                                                    saveProfile\r\n                                                }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: UserProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfoBlock}>\r\n            <div>\r\n                <img src={profilePage?.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <div className={s.photoSelection}>\r\n                    <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n                </div>}\r\n            </div>\r\n            <div className={s.profileDataBlock}>\r\n                <div className={s.profileName}>\r\n                    <span>{profilePage?.fullName}</span>\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        profilePage={profilePage}\r\n                        initialValues={profilePage}\r\n                        onSubmit={onSubmit}/>\r\n                    : <ProfileData\r\n                        profilePage={profilePage}\r\n                        isOwner={isOwner}\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                    />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profilePage, isOwner, goToEditMode}) => {\r\n\r\n    if (!profilePage) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.infoPoint}>\r\n                <span>About me</span>: {profilePage.aboutMe}\r\n            </div>\r\n            <div className={s.infoPoint}>\r\n                <span>Looking for a job</span>: {profilePage.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profilePage.lookingForAJob &&\r\n            <div className={s.infoPoint}>\r\n                <span>My professional skills</span>: {profilePage.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div className={s.infoPoint}>\r\n                <span>Contacts</span>: {Object.keys(profilePage.contacts).map((key) => {\r\n                return <Contact key={key} contactTitle={key}\r\n                                contactValue={profilePage.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}><span>{contactTitle}</span>: {contactValue}</div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../../redux/store\";\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://yt3.ggpht.com/a/AATXAJytBX4x38SJiFeRv9M9zdseNIPWzcWf_slSlz5b=s900-c-k-c0xffffffff-no-rj-mo'/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfilePageType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsType> = React.memo((props) => {\r\n\r\n    let postsElements = [...props.profilePage.posts].reverse().map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps>  = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    placeholder=\"Post message\"\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    addPost})(MyPosts)","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/store\";\r\n\r\ntype ProfileType = {\r\n    profilePage: UserProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<ProfileType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profilePage={props.profilePage}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {UserProfileType} from \"../../redux/store\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: UserProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<any>\r\n}\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\nexport type ProfileContainerType = RouteComponentProps<PathParamType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = JSON.stringify(this.props.authorizedUserId)\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.data.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}