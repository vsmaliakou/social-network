{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","DialogItem","path","id","className","s","dialog","active","src","alt","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","requiredField","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","messages","m","diaologsItems","values","sendMessage","newMessageBody","compose"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+ICM/MC,EAA6B,SAACC,GAAD,MAA8B,CAC7DC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAqBC,GAA8B,IACzDC,EADwD,uKAEhD,IAAD,EACwBC,KAAKC,MAA7BN,EADA,EACAA,OAAWO,EADX,0BAEL,OAAKP,EACE,kBAACG,EAAcI,GADF,kBAAC,IAAD,CAAUC,GAAI,cAJoB,GAC9BC,IAAMN,WAUtC,OAFqCO,YAAQZ,EAARY,CAAoCN,K,+FCH9DO,EAZ0B,SAACL,GAEtC,IAAIM,EAAO,YAAcN,EAAMO,GAE/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,yBAAKC,IAAI,gEAAgEC,IAAI,QAC7E,kBAAC,IAAD,CAASX,GAAII,GAAON,EAAMc,QCFvBC,EANwB,SAACf,GACpC,OACI,yBAAKQ,UAAWC,IAAEO,SAAUhB,EAAMgB,U,yBCApCC,EAAeC,YAAiB,KAkBzBC,EAAsBC,YAA+C,CAACC,KAAM,wBAAtDD,EAbkE,SAACpB,GAClG,OACI,0BAAMsB,SAAUtB,EAAMuB,cAClB,6BACKC,YAAoC,qBAAsB,iBAAkBC,IAAU,CAACC,IAAeT,KAE3G,6BACI,6CCkBDU,EArBwB,SAAC3B,GAEpC,IAAI4B,EAAkB5B,EAAM6B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAEzB,GAAIO,KAAMkB,EAAElB,KAAMP,GAAIyB,EAAEzB,QAChG2B,EAAmBlC,EAAM6B,YAAYM,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAE7B,GAAIS,QAASoB,EAAEpB,QAAST,GAAI6B,EAAE7B,QAMzG,OACI,yBAAKC,UAAWC,IAAEqB,SACd,yBAAKtB,UAAWC,IAAE4B,eACbT,GAEL,yBAAKpB,UAAWC,IAAE0B,UACd,6BAAMD,GACN,kBAACf,EAAD,CAAqBG,SAXb,SAACgB,GACjBtC,EAAMuC,YAAYD,EAAOE,sB,yBCPlBC,sBACXrC,aAPkB,SAACX,GACnB,MAAO,CACHoC,YAAapC,EAAMoC,eAKE,CAACU,kBAC1B3C,IAFW6C,CAGbd","file":"static/js/5.3ed334e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1fKq7\",\"diaologsItems\":\"Dialogs_diaologsItems__1fWG_\",\"active\":\"Dialogs_active__ALZix\",\"dialog\":\"Dialogs_dialog__2VfvX\",\"messages\":\"Dialogs_messages__2NoGM\",\"message\":\"Dialogs_message__3Xkrf\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\n\r\ntype MapStateToProps = ReturnType<typeof mapStateToPropsForRedirect>\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToProps> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogType} from \"../../../redux/types\";\r\n\r\nconst DialogItem: React.FC<DialogType> = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src='https://porting-team.ru/wp-content/uploads/2017/11/659407.jpg' alt='img'/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../redux/types\";\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\ntype NewMessageFormKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormKeysType>(\"Enter your message\", \"newMessageBody\", Textarea, [requiredField, maxLength100])}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormValuesType, PropsType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm/AddMessageForm\";\r\nimport {DialogsInitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\nexport type DialogsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.diaologsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs","import React from 'react';\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}