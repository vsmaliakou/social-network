{"version":3,"sources":["redux/dialogs-reducer.ts","api/users-api.ts","redux/users-reduser.ts","assets/images/Spinner-1s-200px.svg","components/Navbar/Navbar.module.css","components/Common/FormsControls/FormsControls.tsx","serviceWorker.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Header/Header.module.css","api/api.ts","components/Common/Preloader/Preloader.tsx","api/profile-api.ts","redux/profile-reducer.ts"],"names":["initialState","dialogs","id","name","messages","message","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","usersAPI","getUsers","currentPage","pageSize","term","friend","instance","get","then","res","data","follow","userId","post","unfollow","delete","users","totalUsersCount","isFetching","followingInProgress","filter","followSuccess","userID","unfollowSuccess","toggleIsFetching","toggleFollowingInProgress","setFilter","payload","requestUsers","page","dispatch","a","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","bind","usersReducer","map","u","followed","module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","component","validate","text","Boolean","window","location","hostname","match","Navbar","nav","item","to","activeClassName","activeLink","News","Music","Settings","Header","header","src","alt","loginBlock","auth","isAuth","login","onClick","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","ResultCodesEnum","Success","getCaptchaUrl","url","authReducer","HeaderContainer","this","React","Component","connect","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","requiredField","undefined","formSummaryError","ResultCodesForCaptcha","CaptchaIsRequired","length","stopSubmit","_error","formData","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","usersPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","UsersContainer","SuspendedProfile","SuspendedDialogs","SuspendedUsers","App","catchAllUnhandledErrors","e","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","Preloader","AppContainer","compose","promise","Promise","all","withRouter","SamuraiApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","value","maxLengthCreator","maxLength","axios","create","baseURL","withCredentials","headers","preloader","profileAPI","status","put","photoFile","FormData","append","profile","posts","likeCount","addPost","newPostText","setUserStatus","getUserProfile","getUserStatus","updateUserStatus","savePhoto","file","photos","saveProfile","getState","Error","reject","newPost","p","postId"],"mappings":"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","file":"static/js/main.cfaac0c1.chunk.js","sourcesContent":["import { DialogType, MessageType } from \"./types\"\r\n\r\nexport type DialogsActionType = ReturnType<typeof sendMessage>\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n        {id: 6, message: \"Yo\"},\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionType): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND-MESSAGE\": {\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, message: body}],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessage = (newMessageBody: string) => ({type: \"SN/DIALOGS/SEND-MESSAGE\", newMessageBody} as const)\r\n\r\nexport default dialogsReducer","import {instance, GetItemsType, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = \"\", friend: boolean | null = null) {\r\n        return (\r\n            instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n                .then(res => res.data)\r\n        )\r\n    },\r\n    follow(userId: number) {\r\n        return (\r\n            instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n        )\r\n    },\r\n    unfollow(userId: number) {\r\n        return (\r\n            instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n        )\r\n    }\r\n}","import {AppThunk} from \"./redux-store\";\r\nimport {UserType} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nexport type UsersActionType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingInProgress>\r\n    | ReturnType<typeof setFilter>\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as boolean | null\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionType): UsersInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\": {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/UNFOLLOW\": {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"SN/USERS/SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SN/USERS/SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case \"SN/USERS/TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SN/USERS/TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        case \"SN/USERS/SET-FILTER\": {\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number) => ({type: \"SN/USERS/FOLLOW\", userID} as const)\r\nexport const unfollowSuccess = (userID: number) => ({type: \"SN/USERS/UNFOLLOW\", userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: \"SN/USERS/SET-USERS\", users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: \"SN/USERS/SET-CURRENT-PAGE\", currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: \"SN/USERS/SET-TOTAL-USERS-COUNT\",\r\n    totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: \"SN/USERS/TOGGLE-IS-FETCHING\", isFetching} as const)\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => ({\r\n    type: \"SN/USERS/TOGGLE-IS-FOLLOWING-PROGRESS\",\r\n    isFetching,\r\n    userId\r\n} as const)\r\nexport const setFilter = (filter: FilterType) => ({type: \"SN/USERS/SET-FILTER\", payload: filter} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): AppThunk => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    dispatch(setFilter(filter))\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<UsersActionType>, userId: number, apiMethod: Function, actionCreator: (userId: number) => UsersActionType) => {\r\n    debugger\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): AppThunk => async (dispatch) => {\r\n    debugger\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), followSuccess)\r\n}\r\nexport const unfollow = (userId: number): AppThunk => async (dispatch) => {\r\n    debugger\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.aea962f6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__fHahi\",\"item\":\"Navbar_item__1t_6D\",\"activeLink\":\"Navbar_activeLink__1mLPM\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <div>\r\n            <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            validate: Array<FieldValidatorType>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validate}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {AuthInitialStateType} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderPropsType = {\r\n    auth: AuthInitialStateType\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://belarus-online.by/images/obj/21057/0_medium.jpg\" alt=\"img\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.auth.isAuth\r\n                    ? <div>\r\n                        {props.auth.login} - <button onClick={props.logout}>Log out</button>\r\n                </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import {instance, APIResponseType, ResultCodesEnum, ResultCodesForCaptcha} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return (\r\n            instance.delete(`auth/login`).then(res => res.data)\r\n        )\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return (\r\n            instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n        )\r\n    }\r\n}","import {ResultCodesEnum, ResultCodesForCaptcha} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport { authAPI } from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\nexport type AuthActionType = ReturnType<typeof setAuthUserData> | ReturnType<typeof getCaptchaUrlSuccess>\r\nexport type AuthInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: AuthActionType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case \"social-network/auth/SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: action.isAuth\r\n            }\r\n        case \"social-network/auth/GET-CAPTCHA-URL-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: \"social-network/auth/SET-USER-DATA\",\r\n    payload: {userId, email, login},\r\n    isAuth\r\n} as const)\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({\r\n    type: \"social-network/auth/GET-CAPTCHA-URL-SUCCESS\",\r\n    payload: {captchaUrl}\r\n} as const)\r\n\r\nexport const getAuthUserData = (): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.me()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const logout = (): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.logout()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setAuthUserData( null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): AppThunk => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthInitialStateType, logout} from \"../../redux/auth-reducer\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    auth: AuthInitialStateType\r\n}\r\ntype mapDispatchToProps = {\r\n    logout: () => void\r\n}\r\ntype HeaderContainerType = MapStateToPropsType & mapDispatchToProps\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, mapDispatchToProps, {}, AppRootStateType>(mapStateToProps, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport s from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", Input, [requiredField])}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", Input, [requiredField], {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", Input, [], {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt={\"captcha\"}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", Input, [requiredField], {})}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, PropsType>({form: 'login'})(LoginForm)\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchToProps = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    logout: () => void\r\n}\r\ntype LoginPropsType = MapStateToProps & MapDispatchToProps\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToProps => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {login, logout})(Login)\r\n\r\n\r\n\r\n","import {AppThunk} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type AppActionType = ReturnType<typeof initializedSuccess>\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'SN/APP/INITIALIZED-SUCCESS'} as const)\r\n\r\nexport const initializeApp = (): AppThunk => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\nexport default appReducer\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileActionType} from \"./profile-reducer\";\r\nimport dialogsReducer, {DialogsActionType} from \"./dialogs-reducer\";\r\nimport usersReducer, {UsersActionType} from \"./users-reduser\";\r\nimport authReducer, {AuthActionType} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {FormAction, reducer as formReducer} from 'redux-form'\r\nimport appReducer, {AppActionType} from \"./app-reducer\";\r\n\r\nexport let rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType = ProfileActionType\r\n    | DialogsActionType\r\n    | AuthActionType\r\n    | UsersActionType\r\n    | AppActionType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType | FormAction>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React, {ComponentType} from \"react\";\r\n\r\nexport function withSuspense <T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {Route, withRouter, Switch, Redirect, BrowserRouter} from \"react-router-dom\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport store, {AppRootStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedUsers = withSuspense(UsersContainer)\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(\"Some error occured\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                        <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n                        <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n                        <Route path='/users' render={() => <SuspendedUsers/>}/>\r\n                        <Route path='/news' render={() => <News/>}/>\r\n                        <Route path='/music' render={() => <Music/>}/>\r\n                        <Route path='/settings' render={() => <Settings/>}/>\r\n                        <Route path='/login' render={() => <Login/>}/>\r\n                        <Route path='*' render={() => <div>404 PAGE NOT FOUND</div>}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {initializeApp}),\r\n    withRouter\r\n)(App)\r\n\r\nconst SamuraiApp: React.FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default SamuraiApp","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from \"react-dom\";\r\nimport SamuraiApp from \"./App\";\r\n\r\nReactDOM.render(<SamuraiApp/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Hhc7\",\"error\":\"FormsControls_error__1_h06\",\"formSummaryError\":\"FormsControls_formSummaryError__fqhUv\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is requred'\r\n}\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3GmVN\",\"loginBlock\":\"Header_loginBlock__2zlHN\"};","import axios from \"axios\";\r\nimport { UserType } from \"../redux/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6\"\r\n    }\r\n})\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodesForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","import React from \"react\";\r\nimport preloader from \"../../../assets/images/Spinner-1s-200px.svg\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preloader} alt='img'/>\r\n    )\r\n}\r\n\r\nexport default Preloader","import {ProfileType, PhotosType} from \"../redux/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return (\r\n            instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n        )\r\n    },\r\n    getStatus(userId: number) {\r\n        return (\r\n            instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n        )\r\n    },\r\n    updateStatus(status: string) {\r\n        return (\r\n            instance.put<APIResponseType>(`profile/status/`, {status}).then(res => res.data)\r\n        )\r\n    },\r\n    putPhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    putProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"./types\";\r\nimport { profileAPI } from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nexport type ProfileActionType = ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\nexport type ProfileInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likeCount: 12},\r\n        {id: 2, message: \"It's my first post\", likeCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionType): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD-POST\": {\r\n            let newPost = {\r\n                id: 3, message: action.newPostText, likeCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET-USER-PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET-USER-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SN/PROFILE/DELETE-POST\": {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SAVE-PHOTO-SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                profile: state.profile && {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({type: \"SN/PROFILE/ADD-POST\", newPostText} as const)\r\nexport const setUserProfile = (profile: ProfileType) => ({type: \"SN/PROFILE/SET-USER-PROFILE\", profile} as const)\r\nexport const setUserStatus = (status: string) => ({type: \"SN/PROFILE/SET-USER-STATUS\", status} as const)\r\nexport const deletePost = (postId: number) => ({type: \"SN/PROFILE/DELETE-POST\", postId} as const)\r\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: \"SN/PROFILE/SAVE-PHOTO-SUCCESS\", photos} as const)\r\n\r\nexport const getUserProfile = (userId: number): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(data))\r\n}\r\nexport const getUserStatus = (userId: number): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(data))\r\n}\r\nexport const updateUserStatus = (status: string): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: File): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.putPhoto(file)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): AppThunk => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.putProfile(profile)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if(userId !== null){\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error (\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}