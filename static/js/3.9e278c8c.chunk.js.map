{"version":3,"sources":["hoc/withAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateUserStatus","ProfileInfo","profilePage","className","s","imgBlock","src","descriptionBlock","photos","large","Preloader","Post","item","message","likeCount","MyPosts","memo","postsElements","posts","reverse","map","p","id","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","requiredField","Profile","MyPostsContainer","ProfileContainer","userId","match","params","JSON","stringify","authorizedUserId","history","getUserProfile","getUserStatus","compose","profile","data","withRouter"],"mappings":"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","file":"static/js/3.9e278c8c.chunk.js","sourcesContent":["import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType): MapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToProps> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgBlock\":\"ProfileInfo_imgBlock__1EnR4\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3xR_Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3lvOM\",\"posts\":\"MyPosts_posts__viENX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2VERT\"};","import React, {ChangeEvent, useState, useEffect} from \"react\";\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"no status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {UserProfileType} from \"../../../redux/store\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profilePage: UserProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({profilePage, status, updateUserStatus}) => {\r\n\r\n    if (!profilePage) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.imgBlock}>\r\n                <img src='https://www.laoistoday.ie/wp-content/uploads/2018/01/Digital-technology.jpg'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profilePage.photos.large}/>\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../../redux/store\";\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://yt3.ggpht.com/a/AATXAJytBX4x38SJiFeRv9M9zdseNIPWzcWf_slSlz5b=s900-c-k-c0xffffffff-no-rj-mo'/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfilePageType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsType> = React.memo((props) => {\r\n\r\n    let postsElements = [...props.profilePage.posts].reverse().map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps>  = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    placeholder=\"Post message\"\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    addPost})(MyPosts)","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/store\";\r\n\r\ntype ProfileType = {\r\n    profilePage: UserProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfileType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profilePage={props.profilePage}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {UserProfileType} from \"../../redux/store\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: UserProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\nexport type ProfileContainerType = RouteComponentProps<PathParamType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = JSON.stringify(this.props.authorizedUserId)\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.data.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}