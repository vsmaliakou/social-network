{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflowY","map","m","index","Message","key","message","src","photo","width","alt","userName","setMessage","readyStatus","setReadyStatus","openHandler","value","onChange","currentTarget","disabled","onClick","send","ChatPage"],"mappings":"wLAiBMA,EAAO,WACT,MAAkCC,mBAA2B,MAA7D,mBAAOC,EAAP,KAAkBC,EAAlB,KAoBA,OAnBAC,qBAAU,WACN,IAAIC,EACEC,EAAe,WACjBC,WAAWC,EAAe,MAE9B,SAASA,IAAiB,IAAD,IACnB,QAAF,EAAAH,SAAA,SAAII,oBAAoB,QAASH,GAC/B,QAAF,EAAAD,SAAA,SAAIK,SACJL,EAAK,IAAIM,UAAU,iEAChBC,iBAAiB,QAASN,GAC7BH,EAAaE,GAGjB,OADAG,IACO,WACHH,EAAGI,oBAAoB,QAASH,GAChCD,EAAGK,WAER,IAGC,6BACI,kBAACG,EAAD,CAAUX,UAAWA,IACrB,kBAACY,EAAD,CAAgBZ,UAAWA,MAOjCW,EAAwC,SAAC,GAAiB,IAAhBX,EAAe,EAAfA,UAE5C,EAAgCD,mBAA4B,IAA5D,mBAAOc,EAAP,KAAiBC,EAAjB,KAaA,OAXAZ,qBAAU,WACN,IAAIa,EAAiB,SAACC,GAClB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAGvD,OADS,OAATjB,QAAS,IAATA,KAAWU,iBAAiB,UAAWK,GAChC,WACM,OAATf,QAAS,IAATA,KAAWO,oBAAoB,UAAWQ,MAE/C,CAACf,IAGA,yBAAKsB,MAAO,CAACC,OAAQ,QAASC,UAAW,SACpCX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAACC,EAAD,CAASC,IAAKF,EAAOG,QAASJ,SAKhEE,EAAkD,SAAC,GAAe,IAAdE,EAAa,EAAbA,QACtD,OACI,6BACI,yBAAKC,IAAKD,EAAQE,MAAOV,MAAO,CAACW,MAAO,QAASC,IAAI,QADzD,IACiE,2BAAIJ,EAAQK,UACzE,6BACCL,EAAQA,QACT,+BAONlB,EAAoD,SAAC,GAAiB,IAAhBZ,EAAe,EAAfA,UAExD,EAA8BD,mBAAS,IAAvC,mBAAO+B,EAAP,KAAgBM,EAAhB,KACA,EAAsCrC,mBAA8B,WAApE,mBAAOsC,EAAP,KAAoBC,EAApB,KAEMC,EAAc,WAChBD,EAAe,UAGnBpC,qBAAU,WAEN,OADS,OAATF,QAAS,IAATA,KAAWU,iBAAiB,OAAQ6B,GAC7B,WACM,OAATvC,QAAS,IAATA,KAAWO,oBAAoB,OAAQgC,MAE5C,CAACvC,IAUJ,OACI,6BACI,6BACI,8BAAUwC,MAAOV,EAASW,SAAU,SAAAzB,GAAC,OAAIoB,EAAWpB,EAAE0B,cAAcF,WAExE,6BACI,4BAAQG,SAAwB,OAAd3C,GAAsC,UAAhBqC,EAAyBO,QAdzD,WACXd,IAGI,OAAT9B,QAAS,IAATA,KAAW6C,KAAKf,GAChBM,EAAW,OASH,WAODU,UA/GE,WACb,OACI,6BACI,kBAAChD,EAAD","file":"static/js/5.ec82eed3.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n        const closeHandler = () => {\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n        function createChannel() {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n            ws.addEventListener('close', closeHandler)\r\n            setWsChannel(ws)\r\n        }\r\n        createChannel()\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Messages wsChannel={wsChannel}/>\r\n            <AddMessageForm wsChannel={wsChannel}/>\r\n        </div>\r\n    )\r\n}\r\ntype MessagesPropsType = {\r\n    wsChannel: WebSocket | null\r\n}\r\nconst Messages: React.FC<MessagesPropsType> = ({wsChannel}) => {\r\n\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        let messageHandler = (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n        }\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = ({message}) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: \"30px\"}} alt='img'/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\ntype AddMessageFormPropsType = {\r\n    wsChannel: WebSocket | null\r\n}\r\nconst AddMessageForm: React.FC<AddMessageFormPropsType> = ({wsChannel}) => {\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n    const openHandler = () => {\r\n        setReadyStatus('ready')\r\n    }\r\n\r\n    useEffect(() => {\r\n        wsChannel?.addEventListener('open', openHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        wsChannel?.send(message)\r\n        setMessage(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea value={message} onChange={e => setMessage(e.currentTarget.value)}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={wsChannel === null && readyStatus !== 'ready'} onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChatPage"],"sourceRoot":""}