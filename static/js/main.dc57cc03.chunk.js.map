{"version":3,"sources":["components/Common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/Common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.jpg","api/chat-api.ts","redux/chat-reducer.ts","assets/images/Spinner-1s-200px.svg","api/api.ts","components/Users/Users.module.css","serviceWorker.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/Common/Paginator/Paginator.tsx","components/Users/Users/User.tsx","components/Users/Users/UsersSearchForm.tsx","components/Users/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.tsx","components/Common/FormsControls/FormsControls.module.css"],"names":["Preloader","src","preloader","alt","requiredField","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likeCount","addPost","newPostText","type","setUserStatus","getUserProfile","dispatch","a","getUserStatus","updateUserStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","photos","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","postId","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","_newMessageHandler","newMessageHandlerCreator","payload","messagesReceived","_statusChangedHandler","statusChangedHandlerCreator","statusChanged","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodesForCaptcha","axios","create","baseURL","withCredentials","Boolean","window","location","hostname","match","News","Music","Settings","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","getCaptchaUrl","url","authReducer","initialized","appReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","toggleIsFetching","toggleFollowingInProgress","setFilter","requestUsers","page","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","u","followed","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","form","formReducer","app","chat","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Component","props","Suspense","fallback","createSelector","getPageSize","getCurrentPage","getTotalUsersCount","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","paginator","onClick","cn","selectedPage","pageNumber","key","User","user","to","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","followUser","bind","unfollowUser","UsersPage","LoginReduxForm","reduxForm","handleSubmit","createField","Input","undefined","formSummaryError","LoginPage","CaptchaIsRequired","selectIsAuth","selectCurrentUserLogin","AppHeader","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","style","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedProfile","SuspendedDialogs","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","width","height","borderRight","title","LaptopOutlined","NotificationOutlined","padding","margin","minHeight","exact","path","render","AppContainer","compose","connect","promise","all","withRouter","SamuraiApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","component","text"],"mappings":"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","file":"static/js/main.dc57cc03.chunk.js","sourcesContent":["import React from \"react\";\r\nimport preloader from \"../../../assets/images/Spinner-1s-200px.svg\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preloader} alt='img'/>\r\n    )\r\n}\r\n\r\nexport default Preloader","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is requred'\r\n}\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1Eobv\",\"pageNumber\":\"Paginator_pageNumber__mL8zj\",\"selectedPage\":\"Paginator_selectedPage__p0kWs\"};","import {ProfileType, PhotosType} from \"../redux/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return (\r\n            instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n        )\r\n    },\r\n    getStatus(userId: number) {\r\n        return (\r\n            instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n        )\r\n    },\r\n    updateStatus(status: string) {\r\n        return (\r\n            instance.put<APIResponseType>(`profile/status/`, {status}).then(res => res.data)\r\n        )\r\n    },\r\n    putPhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    putProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"./types\";\r\nimport { profileAPI } from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nexport type ProfileActionType = ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\nexport type ProfileInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likeCount: 12},\r\n        {id: 2, message: \"It's my first post\", likeCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionType): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD-POST\": {\r\n            let newPost = {\r\n                id: 3, message: action.newPostText, likeCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET-USER-PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET-USER-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SN/PROFILE/DELETE-POST\": {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SAVE-PHOTO-SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                profile: state.profile && {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({type: \"SN/PROFILE/ADD-POST\", newPostText} as const)\r\nexport const setUserProfile = (profile: ProfileType) => ({type: \"SN/PROFILE/SET-USER-PROFILE\", profile} as const)\r\nexport const setUserStatus = (status: string) => ({type: \"SN/PROFILE/SET-USER-STATUS\", status} as const)\r\nexport const deletePost = (postId: number) => ({type: \"SN/PROFILE/DELETE-POST\", postId} as const)\r\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: \"SN/PROFILE/SAVE-PHOTO-SUCCESS\", photos} as const)\r\n\r\nexport const getUserProfile = (userId: number): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(data))\r\n}\r\nexport const getUserStatus = (userId: number): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(data))\r\n}\r\nexport const updateUserStatus = (status: string): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: File): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.putPhoto(file)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): AppThunk => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.putProfile(profile)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if(userId !== null){\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error (\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer","import { DialogType, MessageType } from \"./types\"\r\n\r\nexport type DialogsActionType = ReturnType<typeof sendMessage>\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n        {id: 6, message: \"Yo\"},\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionType): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND-MESSAGE\": {\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, message: body}],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessage = (newMessageBody: string) => ({type: \"SN/DIALOGS/SEND-MESSAGE\", newMessageBody} as const)\r\n\r\nexport default dialogsReducer","module.exports = __webpack_public_path__ + \"static/media/user.35aa54a1.jpg\";","export type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType  | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string){\r\n        ws?.send(message)\r\n    }\r\n}","import {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v1} from 'uuid'\r\n\r\nexport type ChatActionType = ReturnType<typeof messagesReceived> | ReturnType<typeof statusChanged>\r\nexport type ChatInitialStateType = typeof initialState\r\nexport type ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ChatActionType): ChatInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/CHAT/MESSAGES-RECEIVED\": {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))].filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        }\r\n        case \"SN/CHAT/STATUS-CHANGED\": {\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const messagesReceived = (messages: ChatMessageAPIType[]) => ({type: \"SN/CHAT/MESSAGES-RECEIVED\", payload: {messages}} as const)\r\nexport const statusChanged = (status: StatusType) => ({type: \"SN/CHAT/STATUS-CHANGED\", payload: {status}} as const)\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(messagesReceived(messages))\r\n        }\r\n    }\r\n    return  _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(statusChanged(status))\r\n        }\r\n    }\r\n    return  _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): AppThunk => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\nexport const stopMessagesListening = (): AppThunk => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\nexport const sendMessage = (message: string): AppThunk => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.aea962f6.svg\";","import axios from \"axios\";\r\nimport { UserType } from \"../redux/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6\"\r\n    }\r\n})\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodesForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1MlkK\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import {instance, APIResponseType, ResultCodesEnum, ResultCodesForCaptcha} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return (\r\n            instance.delete(`auth/login`).then(res => res.data)\r\n        )\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return (\r\n            instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n        )\r\n    }\r\n}","import {ResultCodesEnum, ResultCodesForCaptcha} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport { authAPI } from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\nexport type AuthActionType = ReturnType<typeof setAuthUserData> | ReturnType<typeof getCaptchaUrlSuccess>\r\nexport type AuthInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: AuthActionType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case \"social-network/auth/SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: action.isAuth\r\n            }\r\n        case \"social-network/auth/GET-CAPTCHA-URL-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: \"social-network/auth/SET-USER-DATA\",\r\n    payload: {userId, email, login},\r\n    isAuth\r\n} as const)\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({\r\n    type: \"social-network/auth/GET-CAPTCHA-URL-SUCCESS\",\r\n    payload: {captchaUrl}\r\n} as const)\r\n\r\nexport const getAuthUserData = (): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.me()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const logout = (): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.logout()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setAuthUserData( null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): AppThunk => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n","import {AppThunk} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type AppActionType = ReturnType<typeof initializedSuccess>\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'SN/APP/INITIALIZED-SUCCESS'} as const)\r\n\r\nexport const initializeApp = (): AppThunk => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\nexport default appReducer\r\n","import {instance, GetItemsType, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = \"\", friend: boolean | null = null) {\r\n        return (\r\n            instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n                .then(res => res.data)\r\n        )\r\n    },\r\n    follow(userId: number) {\r\n        return (\r\n            instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n        )\r\n    },\r\n    unfollow(userId: number) {\r\n        return (\r\n            instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n        )\r\n    }\r\n}","import {AppThunk} from \"./redux-store\";\r\nimport {UserType} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nexport type UsersActionType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingInProgress>\r\n    | ReturnType<typeof setFilter>\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as boolean | null\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionType): UsersInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/UNFOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"SN/USERS/SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SN/USERS/SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case \"SN/USERS/TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SN/USERS/TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        case \"SN/USERS/SET-FILTER\": {\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number) => ({type: \"SN/USERS/FOLLOW\", userID} as const)\r\nexport const unfollowSuccess = (userID: number) => ({type: \"SN/USERS/UNFOLLOW\", userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: \"SN/USERS/SET-USERS\", users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: \"SN/USERS/SET-CURRENT-PAGE\", currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: \"SN/USERS/SET-TOTAL-USERS-COUNT\",\r\n    totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: \"SN/USERS/TOGGLE-IS-FETCHING\", isFetching} as const)\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => ({\r\n    type: \"SN/USERS/TOGGLE-IS-FOLLOWING-PROGRESS\",\r\n    isFetching,\r\n    userId\r\n} as const)\r\nexport const setFilter = (filter: FilterType) => ({type: \"SN/USERS/SET-FILTER\", payload: filter} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): AppThunk => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    dispatch(setFilter(filter))\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<UsersActionType>, userId: number, apiMethod: Function, actionCreator: (userId: number) => UsersActionType) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): AppThunk => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), followSuccess)\r\n}\r\nexport const unfollow = (userId: number): AppThunk => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileActionType} from \"./profile-reducer\";\r\nimport dialogsReducer, {DialogsActionType} from \"./dialogs-reducer\";\r\nimport usersReducer, {UsersActionType} from \"./users-reducer\";\r\nimport authReducer, {AuthActionType} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {FormAction, reducer as formReducer} from 'redux-form'\r\nimport appReducer, {AppActionType} from \"./app-reducer\";\r\nimport chatReducer, {ChatActionType} from \"./chat-reducer\";\r\n\r\nexport let rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType = ProfileActionType\r\n    | DialogsActionType\r\n    | AuthActionType\r\n    | UsersActionType\r\n    | AppActionType\r\n    | ChatActionType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType | FormAction>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React, {ComponentType} from \"react\";\r\n\r\nexport function withSuspense <T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import {AppRootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\"\r\n\r\nexport const getUsersSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })\r\nexport const getPageSize = (state: AppRootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getCurrentPage = (state: AppRootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getTotalUsersCount = (state: AppRootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getIsFetching = (state: AppRootStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppRootStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: AppRootStateType) => {\r\n    return state.usersPage.filter\r\n}","import React, {useState} from \"react\";\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = ({pageSize, currentPage = 1, totalItemsCount, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 && <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [s.selectedPage]: currentPage === p\r\n                    }, s.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber && <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from \"react\";\r\nimport s from '../Users.module.css'\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { UserType } from \"../../../redux/types\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<UserPropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto} alt='userPhoto' className={s.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}\r\n                            >Unfollow</button>\r\n                            : <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}\r\n                            >Follow</button>}\r\n                </div>\r\n                </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                    </span>\r\n                <span>\r\n                    <div>{\"u.location.country\"}</div>\r\n                    <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../../redux/users-selectors\";\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = \"true\" | \"false\" | \"null\"\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    return {}\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import React, {useEffect} from \"react\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType, follow, requestUsers, unfollow} from \"../../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../../redux/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype QueryParamsType = {term?: string, page?: string, friend?: string}\r\n\r\nexport const Users = () => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend){\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const followUser = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollowUser = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            <Paginator\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                totalItemsCount={totalUsersCount}\r\n                onPageChanged={onPageChanged}\r\n            />\r\n            <div>\r\n                {users.map(u =>\r\n                    <User\r\n                        key={u.id}\r\n                        user={u}\r\n                        followingInProgress={followingInProgress}\r\n                        follow={followUser}\r\n                        unfollow={unfollowUser}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\nimport {Users} from \"./Users/Users\";\r\n\r\nexport const UsersPage  = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return(\r\n        <div>\r\n            {isFetching ? <Preloader/> : null}\r\n            <Users/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport s from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", Input, [requiredField])}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", Input, [requiredField], {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", Input, [], {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt={\"captcha\"}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", Input, [requiredField], {})}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, PropsType>({form: 'login'})(LoginForm)\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\n\r\nexport const LoginPage = () => {\r\n\r\n    const captchaUrl = useSelector<AppRootStateType, string | null>(state => state.auth.captchaUrl)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}","import {AppRootStateType} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state: AppRootStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state: AppRootStateType) => {\r\n    return state.auth.login\r\n}\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\n\r\nexport const AppHeader = () => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout;\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n            <Row>\r\n                <Col span={22}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"><Link to=\"/users\">Developers</Link></Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={1}>\r\n                            <Avatar alt={login || \"\"} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                        </Col>\r\n                        <Col span={1}>\r\n                            <Button onClick={logoutCallback}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={1}>\r\n                        <Button><Link to={'/login'}>Login</Link></Button>\r\n                    </Col>}\r\n            </Row>\r\n        </Header>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {Route, withRouter, Switch, Redirect, Link, HashRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport store, {AppRootStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {UsersPage} from \"./components/Users/UsersContainer\";\r\nimport {LoginPage} from \"./components/Login/Login\";\r\nimport {Breadcrumb, Layout, Menu} from \"antd\";\r\nimport {UserOutlined, LaptopOutlined, NotificationOutlined} from '@ant-design/icons';\r\nimport { AppHeader } from './components/Header/Header';\r\n\r\nconst {SubMenu} = Menu;\r\nconst {Content, Sider} = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'));\r\n\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedChatPage = withSuspense(ChatPage)\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(\"Some error occured\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <Layout>\r\n                <AppHeader/>\r\n                <Layout>\r\n                    <Sider width={200} className=\"site-layout-background\">\r\n                        <Menu\r\n                            mode=\"inline\"\r\n                            style={{height: '100%', borderRight: 0}}\r\n                        >\r\n                            <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                <Menu.Item key=\"1\"><Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                                <Menu.Item key=\"2\"><Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n                            </SubMenu>\r\n                            <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Users\">\r\n                                <Menu.Item key=\"5\"><Link to=\"/users\">Users</Link></Menu.Item>\r\n                            </SubMenu>\r\n                            <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\r\n                                <Menu.Item key=\"9\"><Link to=\"/chat\">Chat</Link></Menu.Item>\r\n                                <Menu.Item key=\"10\">option10</Menu.Item>\r\n                                <Menu.Item key=\"11\">option11</Menu.Item>\r\n                                <Menu.Item key=\"12\">option12</Menu.Item>\r\n                            </SubMenu>\r\n                        </Menu>\r\n                    </Sider>\r\n                    <Layout style={{padding: '0 24px 24px'}}>\r\n                        <Breadcrumb style={{margin: '16px 0'}}>\r\n                            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                        </Breadcrumb>\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                padding: 24,\r\n                                margin: 0,\r\n                                minHeight: 280,\r\n                            }}\r\n                        >\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                                <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n                                <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n                                <Route path='/users' render={() => <UsersPage/>}/>\r\n                                <Route path='/news' render={() => <News/>}/>\r\n                                <Route path='/music' render={() => <Music/>}/>\r\n                                <Route path='/settings' render={() => <Settings/>}/>\r\n                                <Route path='/login' render={() => <LoginPage/>}/>\r\n                                <Route path='/chat' render={() => <SuspendedChatPage/>}/>\r\n                                <Route path='*' render={() => <div>404 PAGE NOT FOUND</div>}/>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {initializeApp}),\r\n    withRouter\r\n)(App)\r\n\r\nconst SamuraiApp: React.FC = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SamuraiApp","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from \"react-dom\";\r\nimport SamuraiApp from \"./App\";\r\n\r\nReactDOM.render(<SamuraiApp/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <div>\r\n            <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            validate: Array<FieldValidatorType>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validate}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Hhc7\",\"error\":\"FormsControls_error__1_h06\",\"formSummaryError\":\"FormsControls_formSummaryError__fqhUv\"};"],"sourceRoot":""}