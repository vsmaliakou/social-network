{"version":3,"sources":["redux/dialogs-reducer.ts","redux/users-reduser.ts","components/Navbar/Navbar.module.css","assets/images/Spinner-1s-200px.svg","api/api.ts","serviceWorker.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","hoc/withSuspense.tsx","App.tsx","redux/redux-store.ts","redux/render.tsx","components/Common/FormsControls/FormsControls.tsx","components/Common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Header/Header.module.css","components/Common/Preloader/Preloader.tsx","redux/profile-reducer.ts"],"names":["initialState","dialogs","id","name","messages","message","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingInProgress","userId","requestUsers","page","dispatch","a","usersAPI","getUsers","data","items","totalCount","folowUnfollowFlow","apiMethod","actionCreator","resultCode","follow","bind","unfollow","usersReducer","map","u","followed","filter","module","exports","instance","axios","create","baseURL","withCredentials","headers","get","then","response","post","delete","getProfile","console","log","profileAPI","authAPI","me","login","email","password","rememberMe","logout","getStatus","updateStatus","status","put","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","to","activeClassName","activeLink","News","Music","Settings","Header","props","header","src","loginBlock","auth","isAuth","onClick","setAuthUserData","getAuthUserData","authReducer","HeaderContainer","this","React","Component","connect","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","Input","requiredField","Field","component","formSummaryError","length","stopSubmit","_error","formData","initialized","appReducer","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","UsersContainer","App","initializeApp","path","render","Preloader","compose","withRouter","app","promise","Promise","all","reducers","combineReducers","profilePage","profileReducer","dialogsPage","usersPage","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","input","meta","touched","children","hasError","formControl","Textarea","restProps","placeholder","validate","value","maxLengthCreator","maxLength","preloader","posts","likeCount","profile","addPost","newPostText","setUserStatus","getUserProfile","getUserStatus","updateUserStatus","newPost","p","postId"],"mappings":"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","file":"static/js/main.5078303c.chunk.js","sourcesContent":["import {DialogsPageType} from \"./store\";\r\n\r\nexport type DialogsActionType = ReturnType<typeof sendMessage>\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n        {id: 6, message: \"Yo\"},\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: DialogsActionType) => {\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\": {\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, message: body}],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessage = (newMessageBody: string) => ({type: \"SEND-MESSAGE\", newMessageBody} as const)\r\n\r\nexport default dialogsReducer","import {UsersPageType, UserType} from \"./store\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport type UsersActionType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingInProgress>\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state: UsersPageType = initialState, action: UsersActionType) => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"UNFOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case \"TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number) => ({type: \"FOLLOW\", userID: userID} as const)\r\nexport const unfollowSuccess = (userID: number) => ({type: \"UNFOLLOW\", userID: userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: \"SET-USERS\", users: users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: \"SET-CURRENT-PAGE\", currentPage: currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: \"SET-TOTAL-USERS-COUNT\",\r\n    totalUsersCount: totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: \"TOGGLE-IS-FETCHING\", isFetching: isFetching} as const)\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => ({\r\n    type: \"TOGGLE-IS-FOLLOWING-PROGRESS\",\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number): AppThunk => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    let data = await usersAPI.getUsers(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\nconst folowUnfollowFlow = async (dispatch: any, userId: number, apiMethod: Function, actionCreator: Function) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): AppThunk => async (dispatch) => {\r\n    folowUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), followSuccess)\r\n}\r\nexport const unfollow = (userId: number): AppThunk => async (dispatch) => {\r\n    folowUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__fHahi\",\"item\":\"Navbar_item__1t_6D\",\"activeLink\":\"Navbar_activeLink__1mLPM\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.aea962f6.svg\";","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return (\r\n            instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n    follow(userId: number) {\r\n        return (\r\n            instance.post(`follow/${userId}`)\r\n        )\r\n    },\r\n    unfollow(userId: number) {\r\n        return (\r\n            instance.delete(`follow/${userId}`)\r\n        )\r\n    },\r\n    getProfile(userId: string) {\r\n        console.log('Obsolete method. Please profileAPI object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return (\r\n            instance.get(`auth/me`)\r\n        )\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return (\r\n            instance.post(`auth/login`, {email, password, rememberMe})\r\n        )\r\n    },\r\n    logout() {\r\n        return (\r\n            instance.delete(`auth/login`)\r\n        )\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return (\r\n            instance.get(`profile/` + userId)\r\n        )\r\n    },\r\n    getStatus(userId: string) {\r\n        return (\r\n            instance.get(`profile/status/` + userId)\r\n        )\r\n    },\r\n    updateStatus(status: string) {\r\n        return (\r\n            instance.put(`profile/status/`, {status: status})\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {AuthorizationType} from \"../../redux/store\";\r\n\r\ntype HeaderType = {\r\n    auth: AuthorizationType\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://belarus-online.by/images/obj/21057/0_medium.jpg\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.auth.isAuth\r\n                    ? <div>\r\n                        {props.auth.data.login} - <button onClick={props.logout}>Log out</button>\r\n                </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import {DataType, AuthorizationType} from \"./store\"\r\nimport {authAPI} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type AuthActionType = ReturnType<typeof setAuthUserData>\r\n\r\nlet initialState = {\r\n    data: {\r\n        email: null,\r\n        id: null,\r\n        login: null,\r\n    },\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state: AuthorizationType = initialState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case \"social-network/auth/SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: action.isAuth\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (data: DataType, isAuth: boolean) => ({\r\n    type: \"social-network/auth/SET-USER-DATA\",\r\n    data: data,\r\n    isAuth\r\n} as const)\r\n\r\nexport const getAuthUserData = (): AppThunk => async (dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(response.data.data, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunk => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const logout = (): AppThunk => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData({email: null, id: null, login: null}, false))\r\n    }\r\n}\r\n\r\nexport default authReducer\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthorizationType} from \"../../redux/store\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    auth: AuthorizationType\r\n}\r\ntype mapDispatchToProps = {\r\n    logout: () => void\r\n}\r\ntype HeaderContainerType = MapStateToPropsType & mapDispatchToProps\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport s from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", Input, [requiredField])}\r\n            {createField(\"Password\", \"password\", Input, [requiredField], \"password\")}\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={\"input\"}/> remember me\r\n            </div>\r\n            {\r\n                error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToProps = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    logout: () => void\r\n}\r\ntype LoginType = MapStateToProps & MapDispatchToProps\r\nconst Login: React.FC<LoginType> = (props) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login, logout})(Login)\r\n\r\n\r\n\r\n","import {AppInitializedType} from \"./store\"\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type AppActionType = ReturnType<typeof initializedSuccess>\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state: AppInitializedType = initialState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: \"INITIALIZED-SUCCESS\"} as const)\r\n\r\nexport const initializeApp = (): AppThunk => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\nexport default appReducer\r\n","import React, {ComponentType} from \"react\";\r\n\r\nexport function withSuspense <T>(Component: ComponentType<T>) {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppRootStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\ntype AppType = MapStateToPropsType & MapDispatchToProps\r\n\r\nclass App extends React.Component<AppType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\r\n                    <Route path='/dialogs' render={withSuspense(DialogsContainer)}/>\r\n                    <Route path='/users' render={withSuspense(UsersContainer)}/>\r\n                    <Route path='/news' render={() => <News/>}/>\r\n                    <Route path='/music' render={() => <Music/>}/>\r\n                    <Route path='/settings' render={() => <Settings/>}/>\r\n                    <Route path='/login' render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp})\r\n)(App)","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileActionType} from \"./profile-reducer\";\r\nimport dialogsReducer, {DialogsActionType} from \"./dialogs-reducer\";\r\nimport usersReducer, {UsersActionType} from \"./users-reduser\";\r\nimport authReducer, {AuthActionType} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {FormAction, reducer as formReducer} from 'redux-form'\r\nimport appReducer, {AppActionType} from \"./app-reducer\";\r\n\r\nexport let reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\nexport type AppActionsType = ProfileActionType\r\n    | DialogsActionType\r\n    | AuthActionType\r\n    | UsersActionType\r\n    | AppActionType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType | FormAction>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport App from \"../App\";\r\nimport store from \"./redux-store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nexport let renderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <BrowserRouter>\r\n                <Provider store={store}>\r\n                    <App/>\r\n                </Provider>\r\n            </BrowserRouter>\r\n        </React.StrictMode>, document.getElementById('root'));\r\n}","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\nimport {Field} from \"redux-form\";\r\n\r\ntype FormControlType = {\r\n    input: {\r\n        name: string\r\n        onBlur: () => void\r\n        onChange: () => void\r\n        onDragStart: () => void\r\n        onDrop: () => void\r\n        onFocus: () => void\r\n        value: string\r\n    }\r\n    meta: {\r\n        error: undefined\r\n        touched: boolean\r\n    }\r\n}\r\n\r\nconst FormControl: React.FC<FormControlType> = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<FormControlType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <div>\r\n            <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n        </div>\r\n    )\r\n}\r\nexport const Input: React.FC<FormControlType> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <div>\r\n            <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string , name: string, component: React.FC<FormControlType>, validate: Array<((value: any) => string | undefined)>, type?: string) => {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validate}\r\n            type={type}\r\n        />\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Hhc7\",\"error\":\"FormsControls_error__1_h06\",\"formSummaryError\":\"FormsControls_formSummaryError__fqhUv\"};","export const requiredField = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is requred'\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3GmVN\",\"loginBlock\":\"Header_loginBlock__2zlHN\"};","import React from \"react\";\r\nimport preloader from \"../../../assets/images/Spinner-1s-200px.svg\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preloader}/>\r\n    )\r\n}\r\n\r\nexport default Preloader","import {ProfilePageType, UserProfileType} from \"./store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport type ProfileActionType = ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof deletePost>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likeCount: 12},\r\n        {id: 2, message: \"It's my first post\", likeCount: 11}\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileActionType) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            let newPost = {\r\n                id: 3, message: action.newPostText, likeCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case \"SET-USER-PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SET-USER-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"DELETE-POST\": {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({type: \"ADD-POST\", newPostText} as const)\r\nexport const setUserProfile = (profile: UserProfileType) => ({type: \"SET-USER-PROFILE\", profile: profile} as const)\r\nexport const setUserStatus = (status: string) => ({type: \"SET-USER-STATUS\", status} as const)\r\nexport const deletePost = (postId: number) => ({type: \"DELETE-POST\", postId} as const)\r\n\r\nexport const getUserProfile = (userId: string): AppThunk => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getUserStatus = (userId: string): AppThunk => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(response.data))\r\n}\r\nexport const updateUserStatus = (status: string): AppThunk => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}