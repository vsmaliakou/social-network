{"version":3,"sources":["api/api.ts","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.jpg","assets/images/Spinner-1s-200px.svg","components/Users/Users.module.css","components/Navbar/Navbar.module.css","components/Common/FormsControls/FormsControls.tsx","serviceWorker.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","api/users-api.ts","redux/users-reduser.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/Common/Paginator/Paginator.tsx","components/Users/Users/User.tsx","components/Users/Users/UsersSearchForm.tsx","components/Users/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.module.css","components/Common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/Common/Paginator/Paginator.module.css","components/Header/Header.module.css"],"names":["ResultCodesEnum","ResultCodesForCaptcha","instance","axios","create","baseURL","withCredentials","headers","profileAPI","userId","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","initialState","posts","id","message","likeCount","addPost","newPostText","type","setUserStatus","getUserProfile","dispatch","a","getUserStatus","updateUserStatus","resultCode","Success","savePhoto","file","photos","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","postId","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","component","validate","text","Boolean","window","location","hostname","match","Navbar","nav","item","to","activeClassName","activeLink","News","Music","Settings","Header","header","src","alt","loginBlock","isAuth","login","onClick","logout","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","getCaptchaUrl","url","authReducer","HeaderContainer","this","React","Component","connect","initialized","appReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","toggleIsFetching","toggleFollowingInProgress","setFilter","requestUsers","page","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","map","u","followed","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","createSelector","getPageSize","getCurrentPage","getTotalUsersCount","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","cn","selectedPage","pageNumber","key","e","User","user","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","memo","useSelector","enableReinitialize","initialValues","String","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","followUser","bind","unfollowUser","UsersPage","Preloader","LoginReduxForm","reduxForm","handleSubmit","requiredField","undefined","formSummaryError","LoginPage","CaptchaIsRequired","length","DialogsContainer","lazy","SuspendedProfile","SuspendedDialogs","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","compose","promise","all","withRouter","SamuraiApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","preloader","maxLengthCreator","maxLength"],"mappings":"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","file":"static/js/main.435c9d07.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { UserType } from \"../redux/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6\"\r\n    }\r\n})\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodesForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","import {ProfileType, PhotosType} from \"../redux/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return (\r\n            instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n        )\r\n    },\r\n    getStatus(userId: number) {\r\n        return (\r\n            instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n        )\r\n    },\r\n    updateStatus(status: string) {\r\n        return (\r\n            instance.put<APIResponseType>(`profile/status/`, {status}).then(res => res.data)\r\n        )\r\n    },\r\n    putPhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    putProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"./types\";\r\nimport { profileAPI } from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nexport type ProfileActionType = ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\nexport type ProfileInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likeCount: 12},\r\n        {id: 2, message: \"It's my first post\", likeCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionType): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD-POST\": {\r\n            let newPost = {\r\n                id: 3, message: action.newPostText, likeCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET-USER-PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET-USER-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SN/PROFILE/DELETE-POST\": {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SAVE-PHOTO-SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                profile: state.profile && {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({type: \"SN/PROFILE/ADD-POST\", newPostText} as const)\r\nexport const setUserProfile = (profile: ProfileType) => ({type: \"SN/PROFILE/SET-USER-PROFILE\", profile} as const)\r\nexport const setUserStatus = (status: string) => ({type: \"SN/PROFILE/SET-USER-STATUS\", status} as const)\r\nexport const deletePost = (postId: number) => ({type: \"SN/PROFILE/DELETE-POST\", postId} as const)\r\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: \"SN/PROFILE/SAVE-PHOTO-SUCCESS\", photos} as const)\r\n\r\nexport const getUserProfile = (userId: number): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(data))\r\n}\r\nexport const getUserStatus = (userId: number): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(data))\r\n}\r\nexport const updateUserStatus = (status: string): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: File): AppThunk => async (dispatch) => {\r\n    let data = await profileAPI.putPhoto(file)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): AppThunk => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.putProfile(profile)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if(userId !== null){\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error (\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer","import { DialogType, MessageType } from \"./types\"\r\n\r\nexport type DialogsActionType = ReturnType<typeof sendMessage>\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n        {id: 6, message: \"Yo\"},\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionType): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND-MESSAGE\": {\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, message: body}],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessage = (newMessageBody: string) => ({type: \"SN/DIALOGS/SEND-MESSAGE\", newMessageBody} as const)\r\n\r\nexport default dialogsReducer","module.exports = __webpack_public_path__ + \"static/media/user.35aa54a1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.aea962f6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1MlkK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__fHahi\",\"item\":\"Navbar_item__1t_6D\",\"activeLink\":\"Navbar_activeLink__1mLPM\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <div>\r\n            <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            validate: Array<FieldValidatorType>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validate}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {AuthInitialStateType} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderPropsType = {\r\n    auth: AuthInitialStateType\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://belarus-online.by/images/obj/21057/0_medium.jpg\" alt=\"img\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.auth.isAuth\r\n                    ? <div>\r\n                        {props.auth.login} - <button onClick={props.logout}>Log out</button>\r\n                </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import {instance, APIResponseType, ResultCodesEnum, ResultCodesForCaptcha} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return (\r\n            instance.delete(`auth/login`).then(res => res.data)\r\n        )\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return (\r\n            instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n        )\r\n    }\r\n}","import {ResultCodesEnum, ResultCodesForCaptcha} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport { authAPI } from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\nexport type AuthActionType = ReturnType<typeof setAuthUserData> | ReturnType<typeof getCaptchaUrlSuccess>\r\nexport type AuthInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: AuthActionType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case \"social-network/auth/SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: action.isAuth\r\n            }\r\n        case \"social-network/auth/GET-CAPTCHA-URL-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: \"social-network/auth/SET-USER-DATA\",\r\n    payload: {userId, email, login},\r\n    isAuth\r\n} as const)\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({\r\n    type: \"social-network/auth/GET-CAPTCHA-URL-SUCCESS\",\r\n    payload: {captchaUrl}\r\n} as const)\r\n\r\nexport const getAuthUserData = (): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.me()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const logout = (): AppThunk => async (dispatch) => {\r\n    let data = await authAPI.logout()\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setAuthUserData( null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): AppThunk => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthInitialStateType, logout} from \"../../redux/auth-reducer\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    auth: AuthInitialStateType\r\n}\r\ntype mapDispatchToProps = {\r\n    logout: () => void\r\n}\r\ntype HeaderContainerType = MapStateToPropsType & mapDispatchToProps\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, mapDispatchToProps, {}, AppRootStateType>(mapStateToProps, {logout})(HeaderContainer)","import {AppThunk} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type AppActionType = ReturnType<typeof initializedSuccess>\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'SN/APP/INITIALIZED-SUCCESS'} as const)\r\n\r\nexport const initializeApp = (): AppThunk => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\nexport default appReducer\r\n","import {instance, GetItemsType, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = \"\", friend: boolean | null = null) {\r\n        return (\r\n            instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n                .then(res => res.data)\r\n        )\r\n    },\r\n    follow(userId: number) {\r\n        return (\r\n            instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n        )\r\n    },\r\n    unfollow(userId: number) {\r\n        return (\r\n            instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n        )\r\n    }\r\n}","import {AppThunk} from \"./redux-store\";\r\nimport {UserType} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nexport type UsersActionType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingInProgress>\r\n    | ReturnType<typeof setFilter>\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as boolean | null\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionType): UsersInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/UNFOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/SET-USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"SN/USERS/SET-CURRENT-PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SN/USERS/SET-TOTAL-USERS-COUNT\": {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case \"SN/USERS/TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SN/USERS/TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        case \"SN/USERS/SET-FILTER\": {\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number) => ({type: \"SN/USERS/FOLLOW\", userID} as const)\r\nexport const unfollowSuccess = (userID: number) => ({type: \"SN/USERS/UNFOLLOW\", userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: \"SN/USERS/SET-USERS\", users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: \"SN/USERS/SET-CURRENT-PAGE\", currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: \"SN/USERS/SET-TOTAL-USERS-COUNT\",\r\n    totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: \"SN/USERS/TOGGLE-IS-FETCHING\", isFetching} as const)\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => ({\r\n    type: \"SN/USERS/TOGGLE-IS-FOLLOWING-PROGRESS\",\r\n    isFetching,\r\n    userId\r\n} as const)\r\nexport const setFilter = (filter: FilterType) => ({type: \"SN/USERS/SET-FILTER\", payload: filter} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): AppThunk => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    dispatch(setFilter(filter))\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<UsersActionType>, userId: number, apiMethod: Function, actionCreator: (userId: number) => UsersActionType) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): AppThunk => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), followSuccess)\r\n}\r\nexport const unfollow = (userId: number): AppThunk => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileActionType} from \"./profile-reducer\";\r\nimport dialogsReducer, {DialogsActionType} from \"./dialogs-reducer\";\r\nimport usersReducer, {UsersActionType} from \"./users-reduser\";\r\nimport authReducer, {AuthActionType} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {FormAction, reducer as formReducer} from 'redux-form'\r\nimport appReducer, {AppActionType} from \"./app-reducer\";\r\n\r\nexport let rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType = ProfileActionType\r\n    | DialogsActionType\r\n    | AuthActionType\r\n    | UsersActionType\r\n    | AppActionType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType | FormAction>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React, {ComponentType} from \"react\";\r\n\r\nexport function withSuspense <T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import {AppRootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\"\r\n\r\nexport const getUsersSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })\r\nexport const getPageSize = (state: AppRootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getCurrentPage = (state: AppRootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getTotalUsersCount = (state: AppRootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getIsFetching = (state: AppRootStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppRootStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: AppRootStateType) => {\r\n    return state.usersPage.filter\r\n}","import React, {useState} from \"react\";\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = ({pageSize, currentPage = 1, totalItemsCount, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 && <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [s.selectedPage]: currentPage === p\r\n                    }, s.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber && <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from \"react\";\r\nimport s from '../Users.module.css'\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { UserType } from \"../../../redux/types\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<UserPropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto} alt='userPhoto' className={s.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}\r\n                            >Unfollow</button>\r\n                            : <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}\r\n                            >Follow</button>}\r\n                </div>\r\n                </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                    </span>\r\n                <span>\r\n                    <div>{\"u.location.country\"}</div>\r\n                    <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../../redux/users-reduser\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../../redux/users-selectors\";\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = \"true\" | \"false\" | \"null\"\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    return {}\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import React, {useEffect} from \"react\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType, follow, requestUsers, unfollow} from \"../../../redux/users-reduser\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../../redux/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype QueryParamsType = {term?: string, page?: string, friend?: string}\r\n\r\nexport const Users = () => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend){\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const followUser = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollowUser = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            <Paginator\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                totalItemsCount={totalUsersCount}\r\n                onPageChanged={onPageChanged}\r\n            />\r\n            <div>\r\n                {users.map(u =>\r\n                    <User\r\n                        key={u.id}\r\n                        user={u}\r\n                        followingInProgress={followingInProgress}\r\n                        follow={followUser}\r\n                        unfollow={unfollowUser}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\nimport {Users} from \"./Users/Users\";\r\n\r\nexport const UsersPage  = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return(\r\n        <div>\r\n            {isFetching ? <Preloader/> : null}\r\n            <Users/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport s from '../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", Input, [requiredField])}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", Input, [requiredField], {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", Input, [], {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt={\"captcha\"}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", Input, [requiredField], {})}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, PropsType>({form: 'login'})(LoginForm)\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\n\r\nexport const LoginPage = () => {\r\n\r\n    const captchaUrl = useSelector<AppRootStateType, string | null>(state => state.auth.captchaUrl)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {Route, withRouter, Switch, Redirect, BrowserRouter} from \"react-router-dom\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport store, {AppRootStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {UsersPage} from \"./components/Users/UsersContainer\";\r\nimport {LoginPage} from \"./components/Login/Login\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(\"Some error occured\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                        <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n                        <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n                        <Route path='/users' render={() => <UsersPage/>}/>\r\n                        <Route path='/news' render={() => <News/>}/>\r\n                        <Route path='/music' render={() => <Music/>}/>\r\n                        <Route path='/settings' render={() => <Settings/>}/>\r\n                        <Route path='/login' render={() => <LoginPage/>}/>\r\n                        <Route path='*' render={() => <div>404 PAGE NOT FOUND</div>}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {initializeApp}),\r\n    withRouter\r\n)(App)\r\n\r\nconst SamuraiApp: React.FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default SamuraiApp","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from \"react-dom\";\r\nimport SamuraiApp from \"./App\";\r\n\r\nReactDOM.render(<SamuraiApp/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Hhc7\",\"error\":\"FormsControls_error__1_h06\",\"formSummaryError\":\"FormsControls_formSummaryError__fqhUv\"};","import React from \"react\";\r\nimport preloader from \"../../../assets/images/Spinner-1s-200px.svg\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preloader} alt='img'/>\r\n    )\r\n}\r\n\r\nexport default Preloader","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is requred'\r\n}\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1Eobv\",\"pageNumber\":\"Paginator_pageNumber__mL8zj\",\"selectedPage\":\"Paginator_selectedPage__p0kWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3GmVN\",\"loginBlock\":\"Header_loginBlock__2zlHN\"};"],"sourceRoot":""}