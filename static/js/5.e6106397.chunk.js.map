{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","key","id","message","ref","React","memo","src","photo","width","alt","userName","setMessage","value","onChange","disabled","onClick","sendMessage","ChatPage"],"mappings":"iMAcMA,EAAO,WAET,IAAMC,EAASC,aAA0C,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAEvEI,EAAWC,cASjB,OAPAC,qBAAU,WAEN,OADAF,EAASG,eACF,WACHH,EAASI,mBAKb,6BACgB,UAAXR,GAAsB,4EACvB,oCACI,kBAACS,EAAD,MACA,kBAACC,EAAD,SAKVD,EAAW,WAEb,IAAME,EAAWV,aAAiD,SAAAC,GAAK,OAAIA,EAAMC,KAAKQ,YAChFC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAV,qBAAU,WACW,IAAD,EAAbS,IACC,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAGA,yBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAjBhC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC5EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,KAa/BL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAACC,EAAD,CAASC,IAAKH,EAAEI,GAAIC,QAASL,OACzD,yBAAKM,IAAK3B,MAKhBuB,EAAqDK,IAAMC,MAAK,YAAgB,IAAdH,EAAa,EAAbA,QACpE,OACI,6BACI,yBAAKI,IAAKJ,EAAQK,MAAOvB,MAAO,CAACwB,MAAO,QAASC,IAAI,QADzD,IACiE,2BAAIP,EAAQQ,UACzE,6BACCR,EAAQA,QACT,iCAIN5B,EAAiB,WAEnB,MAA8BI,mBAAS,IAAvC,mBAAOwB,EAAP,KAAgBS,EAAhB,KACM/C,EAASC,aAA0C,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAEvEI,EAAWC,cAUjB,OACI,6BACI,6BACI,8BAAU2C,MAAOV,EAASW,SAAU,SAAAzB,GAAC,OAAIuB,EAAWvB,EAAEE,cAAcsB,WAExE,6BACI,4BAAQE,SAAqB,UAAXlD,EAAoBmD,QAdxB,WACjBb,IAGLlC,EAASgD,YAAYd,IACrBS,EAAW,OASH,WAODM,UAlGE,WACb,OACI,6BACI,kBAACtD,EAAD","file":"static/js/5.e6106397.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChatMessageType, sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {ChatMessageAPIType, StatusType} from \"../../api/chat-api\";\r\n\r\nconst ChatPage = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat = () => {\r\n\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.chat.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\nconst Messages = () => {\r\n\r\n    const messages = useSelector<AppRootStateType, ChatMessageType[]>(state => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300){\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll){\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: \"30px\"}} alt='img'/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\nconst AddMessageForm = () => {\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.chat.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHadler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea value={message} onChange={e => setMessage(e.currentTarget.value)}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHadler}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChatPage"],"sourceRoot":""}