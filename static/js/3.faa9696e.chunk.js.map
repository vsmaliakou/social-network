{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profilePage","error","onSubmit","className","s","formSummaryError","createField","Input","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","type","target","files","length","initialValues","formData","then","Post","item","message","likeCount","requiredField","MyPosts","memo","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","Profile","MyPostsContainer","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","console","refreshProfile","prevProps","prevState","compose","profile","withRouter"],"mappings":"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","file":"static/js/3.faa9696e.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\n\r\ntype MapStateToProps = ReturnType<typeof mapStateToPropsForRedirect>\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToProps> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3xR_Z\",\"mainPhoto\":\"ProfileInfo_mainPhoto__tjjbB\",\"contact\":\"ProfileInfo_contact__AvHXG\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3-ikd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3lvOM\",\"posts\":\"MyPosts_posts__viENX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2VERT\"};","import React, {ChangeEvent, useState, useEffect} from \"react\";\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || \"no status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport { ProfileType } from \"../../../redux/types\";\r\n\r\ntype ProfileDataFormType = {\r\n    profilePage: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType> = ({handleSubmit, profilePage, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            {\r\n                error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", Input, [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", Input, [], \"checkbox\")}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profilePage ?  profilePage.contacts : \"\").map((key) => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, Input, [])}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ProfileType, ContactsType} from \"../../../redux/types\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profilePage: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    // saveProfile: (formData: ProfileType) => Promise<any>\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         profilePage,\r\n                                                         status,\r\n                                                         updateUserStatus,\r\n                                                         isOwner,\r\n                                                         savePhoto,\r\n                                                         saveProfile\r\n                                                     }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profilePage) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profilePage?.photos.large || userPhoto} className={s.mainPhoto} alt=\"img\"/>\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        profilePage={profilePage}\r\n                        initialValues={profilePage}\r\n                        onSubmit={onSubmit}/>\r\n                    : <ProfileData\r\n                        profilePage={profilePage}\r\n                        isOwner={isOwner}\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                    />}\r\n\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profilePage: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profilePage, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {profilePage.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profilePage.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profilePage.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profilePage.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profilePage.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profilePage.contacts).map((key) => {\r\n                return <Contact key={key} contactTitle={key}\r\n                                contactValue={profilePage.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://yt3.ggpht.com/a/AATXAJytBX4x38SJiFeRv9M9zdseNIPWzcWf_slSlz5b=s900-c-k-c0xffffffff-no-rj-mo' alt=\"img\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../../../utils/validators/validators\";\r\n\r\ntype PropsType = {}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType>  = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\"Your post\", \"newPostText\", Textarea, [requiredField])}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: \"ProfileAddNewPostForm\"})(AddPostForm)\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfileInitialStateType} from \"../../../redux/profile-reducer\";\r\nimport AddPostForm, {AddPostFormValuesType} from \"./AddPostForm/AddPostForm\";\r\n\r\nexport type MapPropsType = {\r\n    profilePage: ProfileInitialStateType\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = React.memo((props) => {\r\n\r\n    let postsElements = [...props.profilePage.posts].reverse().map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nexport default MyPosts","import {addPost} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppRootStateType>(mapStateToProps, {\r\n    addPost})(MyPosts)","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { ProfileType } from \"../../redux/types\";\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profilePage={props.profilePage}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateUserStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../redux/types\";\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamType>\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URL params or in state ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileContainerPropsType, prevState: ProfileContainerPropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profilePage: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}